<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="IDS_ADVCOMPAREFUNCTOID_BITMAP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\Compare.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IDS_ADVCOMPAREFUNCTOID_DESCRIPTION" xml:space="preserve">
    <value>Compares two specified String objects, ignoring or honoring their case, and returns an boolean that indicates if they are equal or not.
Parameters:
- The first string to compare. 
- The second string to compare. 
- True to ignore case during the comparison; otherwise, False.</value>
  </data>
  <data name="IDS_ADVCOMPAREFUNCTOID_NAME" xml:space="preserve">
    <value>String Advance Compare Functoid</value>
  </data>
  <data name="IDS_ADVCOMPAREFUNCTOID_TOOLTIP" xml:space="preserve">
    <value>Returns an boolean that indicates if they are equal or not.</value>
  </data>
  <data name="IDS_CONSTANTFUNCTOID_BITMAP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\Constant.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IDS_CONSTANTFUNCTOID_DESCRIPTION" xml:space="preserve">
    <value>Use the String Constant functoid to set constant values. This functoid only accept one value and allows you to set constant values in elements.</value>
  </data>
  <data name="IDS_CONSTANTFUNCTOID_NAME" xml:space="preserve">
    <value>String Constant functoid</value>
  </data>
  <data name="IDS_CONSTANTFUNCTOID_TOOLTIP" xml:space="preserve">
    <value>Returns the a string value</value>
  </data>
  <data name="IDS_NORMALIZEFUNCTOID_BITMAP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\Normalize.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IDS_NORMALIZEFUNCTOID_DESCRIPTION" xml:space="preserve">
    <value>Function normalize the text. It will remove two or more consecutive spaces and replace them with a single space, remove two or more consecutive newlines and replace them with a single newline and "condense" multiple tabs into one.
Parameters:
- String to Normalize</value>
  </data>
  <data name="IDS_NORMALIZEFUNCTOID_NAME" xml:space="preserve">
    <value>String Normalize Functoid</value>
  </data>
  <data name="IDS_NORMALIZEFUNCTOID_TOOLTIP" xml:space="preserve">
    <value>Return the string normalize without consecutive spaces, lines or tabs</value>
  </data>
  <data name="IDS_PADLEFTFUNCTOID_BITMAP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\PadLeft.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IDS_PADLEFTFUNCTOID_DESCRIPTION" xml:space="preserve">
    <value>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.
Parameters:
- String that will be pad on the left with a specified Unicode character
- The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.  
- A Unicode padding character.</value>
  </data>
  <data name="IDS_PADLEFTFUNCTOID_NAME" xml:space="preserve">
    <value>String PadLeft Functoid</value>
  </data>
  <data name="IDS_PADLEFTFUNCTOID_TOOLTIP" xml:space="preserve">
    <value>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many paddingChar characters as needed to create a length of totalWidth. However, if totalWidth is less than the length of this instance, the method returns a reference to the existing instance. If totalWidth is equal to the length of this instance, the method returns a new string that is identical to this instance.</value>
  </data>
  <data name="IDS_PADRIGHTFUNCTOID_BITMAP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\PadRight.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IDS_PADRIGHTFUNCTOID_DESCRIPTION" xml:space="preserve">
    <value>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.
Parameters:
- String that will be pad on the left with a specified Unicode character
- The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. 
- A Unicode padding character.</value>
  </data>
  <data name="IDS_PADRIGHTFUNCTOID_NAME" xml:space="preserve">
    <value>String PadRight Functoid</value>
  </data>
  <data name="IDS_PADRIGHTFUNCTOID_TOOLTIP" xml:space="preserve">
    <value>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many paddingChar characters as needed to create a length of totalWidth. However, if totalWidth is less than the length of this instance, the method returns a reference to the existing instance. If totalWidth is equal to the length of this instance, the method returns a new string that is identical to this instance.</value>
  </data>
  <data name="IDS_REMOVELEADINGZEROSFUNCTOID_BITMAP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\removeLeadingZeros.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IDS_REMOVELEADINGZEROSFUNCTOID_DESCRIPTION" xml:space="preserve">
    <value>Removes any leading zeros from the input string</value>
  </data>
  <data name="IDS_REMOVELEADINGZEROSFUNCTOID_NAME" xml:space="preserve">
    <value>String remove leading zeros</value>
  </data>
  <data name="IDS_REMOVELEADINGZEROSFUNCTOID_TOOLTIP" xml:space="preserve">
    <value>Removes any leading zeros from the input string</value>
  </data>
  <data name="IDS_REPLACEFUNCTOID_BITMAP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\Replace.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IDS_REPLACEFUNCTOID_DESCRIPTION" xml:space="preserve">
    <value>This functoid returns a new string in which all occurrences of a specified string (second parameter) found in the first string are replaced with another specified string (third parameter).
Parameters:
- String where we will replace the values
- The string to be replaced. 
- The string to replace all occurrences of oldValue.</value>
  </data>
  <data name="IDS_REPLACEFUNCTOID_NAME" xml:space="preserve">
    <value>String Replace Functoid</value>
  </data>
  <data name="IDS_REPLACEFUNCTOID_TOOLTIP" xml:space="preserve">
    <value>Returns a string that is equivalent to the current string except that all instances of oldValue are replaced with newValue. If oldValue is not found in the current instance, the method returns the current instance unchanged.</value>
  </data>
  <data name="IDS_TOTITLECASEFUNCTOID_BITMAP" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\ToTitleCase.bmp;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IDS_TOTITLECASEFUNCTOID_DESCRIPTION" xml:space="preserve">
    <value>Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms)
Parameters:
- The string to convert to title case.</value>
  </data>
  <data name="IDS_TOTITLECASEFUNCTOID_NAME" xml:space="preserve">
    <value>String ToTitleCase functoid</value>
  </data>
  <data name="IDS_TOTITLECASEFUNCTOID_TOOLTIP" xml:space="preserve">
    <value>Returns the specified string converted to title case.</value>
  </data>
</root>